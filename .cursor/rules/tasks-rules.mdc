---
description: Использовать это правило для декомпозиции проекта на **крупные сквозные задачи** и управления задачами в одном месте
alwaysApply: false
---
# Rules: Управление задачами (декомпозиция, роли, критерии)

> **Description**  
> Использовать это правило для декомпозиции проекта на **крупные сквозные задачи** и управления ими в одном месте.  
> Задачи создаются **на основе готовых артефактов** и содержат ссылки на них: `docs/prd.md`, `docs/architecture.md`, `docs/deployment.md`, `db/schema.dbml`, `docs/openapi.yaml`.  
> Каждая сквозная задача имеет **общие критерии готовности**, а исполняется через **подзадачи по ролям**: аналитик → бэкенд → фронтенд → деплой.

> **Filenames & Locations**  
> - **Единственный источник задач**: `tasks/tasks.yaml` (если файла нет — создать).  
> - Детальные спецификации по задачам: `docs/specs/<TASK-ID>.md`.

---

## 0. Принципы

- **Крупные и ценные**: каждая задача покрывает **одно или несколько FR** из PRD и приносит самостоятельную ценность.  
- **Демо‑способность**: каждую задачу на livedemo можно **собрать, запустить локально и показать результат**.  
- **Логичный порядок**: сначала базовые возможности (аутентификация, CRUD), затем расширения (фильтры, сортировки и т. п.). Не реализовываем сортировку до реализации пользователей и логина.  
- **Сквозные критерии**: DoD формулируется **для всей задачи**, а не отдельно для подзадач, но должны включать обязательно криетерии по аналитике, бэкенду, фронтенду и девопсу, возможно агрегированных формулировках, но так что бы не было что все критерии выполнены, а фронтеэнд забыли реализовать.
- **Трассировка**: в каждой задаче указывать ссылки на PRD/Architecture/OpenAPI/DBML/Deployment, которые она реализует.  

---

## 1. Схема кодов и ролей

- Сквозная задача: `id: TK-###` (например, `TK-001`).  
- Подзадачи внутри задачи: `id: <TASK-ID>/<ROLE>` (например, `TK-001/AN`).  
- Роли (код → назначение):
  - `AN` — Analyst (аналитик, готовит **детальную спецификацию** для задачи).  
  - `BE` — Backend (реализация серверной части).  
  - `FE` — Frontend (реализация клиентской части).  
  - `DV` — DevOps/Deploy (развёртывание на стенде).  

---

## 2. Статусы

- **Общий статус задачи** (`status` на уровне `TK-###`): `planned` → `spec-prepared` → `in-progress` → `in-review` → `done`.  
- **Статус подзадачи** (`subtasks[].status`): `planned` | `in-progress` | `blocked` | `in-review` | `done`.  
- Переход задачи в `in-progress` возможен **только** после `TK-###/AN: done` (готова детальная спецификация).

---

## 3. Структура `tasks/tasks.yaml`

Файл YAML является **единственным источником правды** по задачам. Поля уровня задачи:

```yaml
version: 1
sources:
  prd: docs/prd.md
  architecture: docs/architecture.md
  deployment: docs/deployment.md
  dbml: db/schema.dbml
  openapi: docs/openapi.yaml

tasks:
  - id: TK-001
    title: Пользователи и аутентификация (JWT 24h)
    order: 10            # порядок выполнения (целое, чем меньше — тем раньше)
    status: planned
    frRefs: [FR-Auth-Login, FR-Auth-CurrentUser]  # идентификаторы FR из PRD
    context:
      prd: "docs/prd.md#аутентификация"
      architecture: "docs/architecture.md#потоки-аутентификации"
      dbml: "db/schema.dbml#users"
      openapi: "docs/openapi.yaml#/paths/~1auth~1login"
      deployment: "docs/deployment.md#переменные-окружения"
    acceptanceCriteria:
      # УПРОЩЁННЫЙ ФОРМАТ: только текст и признак готовности (done)
      - text: "В OpenAPI описаны /auth/login и /me; security: bearer JWT 24h"
        done: false
      - text: "В DBML есть таблица users с полями id/email/password_hash/created_at/updated_at"
        done: false
      - text: "Код бэкенда реализует логин и /me; хэндлеры соответствуют OpenAPI"
        done: false
      - text: "Локальный запуск backend+postgres успешен; эндпоинты readiness возвращает 200"
        done: false
    subtasks:
      - id: TK-001/AN
        role: AN
        title: Детальная спецификация по аутентификации
        status: planned
        outputs:
          - specs/TK-001.md
      - id: TK-001/BE
        role: BE
        title: Реализация backend аутентификации
        status: planned
      - id: TK-001/FE
        role: FE
        title: Форма логина/индикатор профиля
        status: planned
      - id: TK-001/DV
        role: DV
        title: Переменные окружения и прокси маршруты в Caddy
        status: planned
```

**Обязательные поля уровня задачи**: `id`, `title`, `order`, `status`, `frRefs`, `context`, `acceptanceCriteria`, `subtasks`.  
**Обязательные поля подзадачи**: `id`, `role`, `title`, `status` (+ `outputs` для `AN`).

---

## 4. Детальная спецификация (подзадача AN)

- `TK-###/AN` **всегда первая** и завершена до начала разработки.  
- Файл: `specs/<TASK-ID>.md` (например, `specs/TK-001.md`).  
- Содержит: цель, связи с FR, сценарии/потоки, схемы API (ссылки на OpenAPI), модель данных (ссылки на DBML), UX‑состояния, негативные кейсы, требования к логам/health‑чекам.  
- Уровень детализации — **достаточный для реализации** без уточнений в чате.

---

## 5. Правила декомпозиции и порядок

1. **Базовый слой**: фундаментальные возможности системы — доступ/идентификация (если применимо), базовые сущности домена, CRUD-операции и устойчивое хранение данных.
2. **Доменный слой**: ключевые сценарии предметной области — операции над основными объектами, бизнес-правила/вычисления, связанные процессы (коммуникации/комментарии и т. п. — если применимо).
3. **Пользовательский опыт**: интерфейсы и состояния (loading/empty/error/success), навигация и представления списков; дополнительные функции удобства — фильтры/сортировки/поиск (по мере готовности базового слоя).
4. **Инфраструктура и развёртывание**: контейнеризация, конфигурация окружений, применение миграций при запуске, прокси/TLS, публикация на удалённом стенде.

> Примеры сквозных задач (универсальный шаблон):
>
> * `TK-001` Доступ/Идентификация или другой базовый фундамент (AN → BE → FE → DV) *(если применимо)*
> * `TK-002` CRUD основных доменных сущностей (AN → BE → FE → DV)
> * `TK-003` Бизнес-правила/вычисления для доменных сущностей (AN → BE → FE → DV)
> * `TK-004` Связанные процессы (например, комментарии/уведомления) *(по необходимости)* (AN → BE → FE → DV)
> * `TK-005` Представления списков + фильтры/сортировки/поиск *(после базового CRUD)* (AN → BE → FE → DV)
> * `TK-006` Развёртывание на удалённом стенде согласно стратегии (AN → DV)

Каждая задача должна опираться на FR из `docs/prd.md` и соответствующие разделы Architecture/OpenAPI/DBML/Deployment.

---

## 6. Критерии готовности (DoD) — определение, формулировка и фиксация

- **Определение (что такое DoD)**: DoD — это перечень проверяемых утверждений на уровне всей сквозной задачи `TK-###`, подтверждающих, что результат реализации **всех её подзадач** завершён и соответствует артефактам (PRD/Architecture/OpenAPI/DBML/Deployment). DoD проверяется **после завершения разработки** и перед переводом задачи в `done`.
- **Не путать с критериями начала работы**: DoD — это не условия старта. Гейты начала уже заданы статусами и порядком ролей (см. правило: переход в `in-progress` возможен только после `TK-###/AN: done`).
- **Источники и покрытие**: пункты DoD выводятся из FR в `docs/prd.md` и соответствующих разделов `docs/architecture.md`, `docs/openapi.yaml`, `db/schema.dbml`, `docs/deployment.md`. Они должны покрывать существенные аспекты результата: функциональность, модель данных, API‑контракт, запуск/здоровье сервиса и, при наличии, UX‑состояния.
- **Проверяемость**: каждый пункт формулируется так, чтобы агент/ревьюер мог подтвердить его **исключительно по содержимому репозитория** (код и/или документы), без ручных кликов, скриншотов и внешних ссылок.
- **Формат хранения** (в `tasks/tasks.yaml` → `tasks[].acceptanceCriteria`):
  ```yaml
  - text: "<проверяемое утверждение по коду/докам>"
    done: <true|false>
  ```
  При создании задачи все `done: false`. По мере проверки переводятся в `true` в том же PR/коммите, где завершена реализация.
- **Примеры корректных формулировок**:
  ```yaml
  - text: "В OpenAPI описаны /auth/login и /me; security: bearer JWT 24h"
    done: false
  - text: "В DBML есть таблица users со строго перечисленными полями"
    done: false
  - text: "эндпоинт readiness отдаёт 200 при локальном запуске docker-compose"
    done: false
  ```
- **Процесс проверки и закрытия**: перед переводом задачи в `in-review`/`done` пробегаем все пункты DoD и проставляем `done: true` только при объективном подтверждении. Задача может быть переведена в `done` **только когда все** пункты DoD имеют `done: true`.
- **Обновление**: изменение PRD/Architecture/OpenAPI/DBML/Deployment требует актуализации соответствующих пунктов DoD и их повторной проверки.

---

## 7. Практики ведения файла `tasks/tasks.yaml`

- **Порядок** задач задаётся полем `order`; при равенстве — по расположению в списке.  
- Все ссылки в `context` должны быть **относительными** к репозиторию.  
- Коммиты и PR должны включать идентификаторы задач: `TK-003`, `TK-003/FE`.  
- Избегать «мелких» задач, которые нельзя показать на демо или которые не тянут на ценность (скрытые рефакторинги, косметика).  
- Раздел `version` инкрементировать при несовместимых изменениях формата.  
