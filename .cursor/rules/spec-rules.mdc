---
description: Использовать это правило, когда необходимо подготовить **детализированную спецификацию сквозной задачи** (охватывает backend, frontend и devops).
alwaysApply: false
---
# Rules: Детализированная спецификация задачи (AN → BE → FE → DV)

> **Description**  
> Использовать это правило, когда необходимо подготовить **детализированную спецификацию сквозной задачи** (охватывает backend, frontend и devops).  
> Цель — чтобы разработчик среднего уровня и AI‑агент могли реализовать задачу **с первого раза**, не задавая уточняющих вопросов.

> **Dependencies**  
> Спецификация опирается на существующие артефакты и **содержит на них явные ссылки**:  
> - PRD: `docs/prd.md`  
> - Архитектура: `docs/architecture.md`  
> - Логическая модель: `db/schema.dbml`  
> - OpenAPI: `docs/openapi.yaml`  
> - Стратегия развертывания: `docs/deployment.md`

> **Filename & Location**  
> Для каждой задачи создаётся один файл спецификации: `docs/specs/<TASK-ID>.md` (например, `docs/specs/TK-001.md`).  
> Файл **перезаписывается целиком** при обновлении спецификации.

---

## 1) Структура спецификации

1. **Заголовок**  
   `# <TASK-ID> — <Краткое название>`

2. **Контекст и артефакты**  
   - **FR из PRD**: перечислить идентификаторы и кратко цель реализации.  
   - **Ссылки**: на разделы PRD/Architecture/DBML/OpenAPI/Deployment, которые релевантны задаче (относительные ссылки с якорями).

3. **Область и границы**  
   - Что входит/не входит в задачу (Out of Scope).  
   - Зависимости от других задач.

4. **Требования по слоям** (сквозная спецификация)  
   - **Backend**: эндпоинты, контракты, проверки, формат ответов/ошибок, изменения в БД/миграции (если нужны).  
   - **Frontend**: экраны/состояния (loading/empty/error/success), взаимодействия с API, валидации.  
   - **DevOps**: переменные окружения, маршруты прокси, требования к health‑чекам/логам, влияние на compose/Caddy.

5. **Диаграмма последовательности (Mermaid)**  
   Подробный сценарий взаимодействия компонентов (минимум: FE ↔ API ↔ DB; по необходимости добавить Caddy/Jobs).  
   **Требования к оформлению:**
   - Использовать `sequenceDiagram`.  
   - В **названиях участников и сообщениях** не использовать слэши `/ \` и скобки `(` `)`; перенос строки — обычным переносом в тексте.  
   - Достаточно подробно, чтобы восстановить порядок вызовов, параметры и ожидаемые ответы.

   _Шаблон:_
   ```mermaid
   sequenceDiagram
     participant FE as Frontend
     participant API as BackendAPI
     participant DB as Database

     FE->>API: POST /resource
     API->>DB: insert row
     DB-->>API: ok
     API-->>FE: 201 {id, ...}
   ```

6. **Таблица взаимодействий**  
   Подробная фиксация каждого шага из диаграммы:

   | Шаг | Источник | Получатель | Тип/Протокол | Ресурс/Эндпоинт | Запрос (схема) | Ответ (схема) | Атрибуты/валидации | Ошибки | Побочные эффекты |
   |-----|----------|------------|--------------|-----------------|----------------|----------------|--------------------|--------|------------------|
   | 1   | FE       | API        | HTTP POST    | `/resource`     | `#/components/schemas/ResourceCreate` | `#/components/schemas/Resource` | `title ≤ 200`, обязательные поля | 400/401/409 | вставка записи |
   | 2   | API      | DB         | SQL          | `table`         | —              | —              | FK/UNIQUE/CHECK    | —      | коммит транзакции |

7. **Алгоритмы и бизнес‑правила (если применимо)**  
   - Чётко описать формулы/шаги, варианты ветвления, ошибки.  
   - Псевдокод без двусмысленностей, понятный middle‑разработчику.

   _Шаблон:_
   ```text
   Алгоритм расчёта веса:
   1. Принять value, speed, cost в диапазоне 1..5.
   2. Вес = round((value*0.5 + speed*0.3 + (6 - cost)*0.2) * 20).
   3. Ограничить 0..100. При ошибке валидации вернуть 422.
   ```

8. **Модель данных (срез)**  
   - Ссылки на соответствующие таблицы/поля в `db/schema.dbml`.  
   - Новые поля/индексы/ограничения — явно перечислить (и в какой миграции появятся); добавление новых полей/индексов/ограничений явно согласуй в чате с пользователем перед продолжением добавления; постараяйся избежать этого.

9. **Контракты API (срез)**  
   - Список эндпоинтов с методами и ссылками на разделы `docs/openapi.yaml` (`paths`, `components/schemas`).  
   - Для каждого — обязательные/необязательные параметры, тела, коды ответов, формат ошибок (единый).

10. **Требования к логам/health‑чекам и конфигурации**  
    - Что логируем (уровни), какие health‑эндпоинты считаем нормой.  
    - Какие переменные окружения нужны (ссылки на `docs/deployment.md`).

11. **Критерии готовности (AC)**  
    Формулировать **только** как утверждения, проверяемые по **исходному коду/документам**.  
    Уточни в `tasks/tasks.yaml` критерии готовности для задачи по результату создания спецификации сохраняя формат.

12. **DoR спецификации** (готовность к разработке)  
    - Диаграмма последовательности и таблица взаимодействий совпадают.  
    - Все эндпоинты имеют ссылки на OpenAPI 3.0.3, схемы вынесены в `components/schemas`.  
    - Все операции меняющие данные соответствуют полям/ограничениям в DBML.  
    - Определены UX‑состояния и базовые тексты ошибок.  
    - Указаны env‑переменные/прокси‑маршруты (если применимо).

---

## 2) Процедура создания спецификации (для аналитика)

1. На основе `docs/prd.md` выделить FR, которые закрывает задача.  
2. По `docs/architecture.md` и потокам сформировать шаги сценария.  
3. Сверить сущности/поля с `db/schema.dbml`; при расхождении — описать изменения (и подготовить issue/миграцию).  
4. Сопоставить шаги с `docs/openapi.yaml` (методы, пути, схемы). При необходимости — оформить ПР в OpenAPI.  
5. Описать UX‑состояния, валидации и негативные кейсы.  
6. Нарисовать **sequenceDiagram** и составить **таблицу взаимодействий**.  
7. Прописать алгоритмы/формулы (если нужны).  
8. Добавить AC, проверяемые по коду/докам.  
9. Сохранить как `specs/<TASK-ID>.md`, обновить ссылки в `tasks/tasks.yaml` (`outputs`).

---

## 3) Качество и авто‑проверки

- **OpenAPI**: валидация 3.0.3 (локальная схема), линтер Spectral.  
- **DBML**: валидация парсером, согласование типов/ограничений с API.  
- **Mermaid**: проверка рендера; в названиях участников/сообщений не использовать `/ \ ( )`, переносы строк — обычные.  
- **Единый формат ошибок** в API (`components/schemas/Error`).  
- Согласованность имён: `snake_case` в БД ↔ `camelCase` в API.

---

## 4) Мини‑шаблон `specs/<TASK-ID>.md`

```md
# <TASK-ID> — <Название>

## Контекст и артефакты
FR: <перечень FR из PRD>
PRD: docs/prd.md#...
Architecture: docs/architecture.md#...
DBML: db/schema.dbml#...
OpenAPI: docs/openapi.yaml#/paths/...
Deployment: docs/deployment.md#...

## Область и границы
In: ...
Out: ...
Dependencies: ...

## Требования по слоям
### Backend
- ...
### Frontend
- ...
### DevOps
- ...

## Диаграмма последовательности
```mermaid
sequenceDiagram
  participant FE as Frontend
  participant API as BackendAPI
  participant DB as Database
  FE->>API: ...
  API->>DB: ...
  DB-->>API: ...
  API-->>FE: ...
```

## Таблица взаимодействий
| Шаг | Источник | Получатель | Тип/Протокол | Ресурс/Эндпоинт | Запрос (схема) | Ответ (схема) | Атрибуты/валидации | Ошибки | Побочные эффекты |
|-----|----------|------------|--------------|-----------------|----------------|----------------|--------------------|--------|------------------|
| 1   |          |            |              |                 |                |                |                    |        |                  |

## Алгоритмы и бизнес‑правила
- ...

## Модель данных (срез)
- ...

## Контракты API (срез)
- ...

## Логи/health/конфигурация
- ...

## Критерии готовности (AC)
- text: "..."
  done: false

## DoR спецификации
- [ ] Sequence и таблица согласованы
- [ ] OpenAPI 3.0.3: paths + schemas
- [ ] DBML: сущности/поля/ограничения
- [ ] UX‑состояния описаны
- [ ] Env/прокси указаны (если нужно)
```

