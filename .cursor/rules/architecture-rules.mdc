---
description: Использовать это правило, когда требуется подготовить **архитектурный документ** для проекта.
alwaysApply: false
---
# Rules: Architecture Docs

> **Description**:  
> Использовать это правило, когда требуется подготовить **архитектурный документ** для проекта.  
> В документе фиксируется целевая архитектура решения, ключевые компоненты, взаимодействия и потоки данных.  
> На основании архитектуры позже будут создаваться логическая модель данных (.dbml) и спецификация API (OpenAPI), поэтому уровень детализации должен быть достаточным для их построения.  

> **Filename & Location**:  
> Архитектурный документ сохраняется в каталоге `docs/` с именем `architecture.md`.  
> Если файл уже существует — он перезаписывается целиком.  

> **Dependency**:  
> Архитектурный документ создаётся **после подготовки PRD** (`docs/prd.md`) и должен опираться на его требования.

---

## Технологический стек
- **Backend**: Go (golang), детали реализации см. в `.cursor/rules/dev-backend-rules.md`.
- **База данных**: PostgreSQL.
- **Миграции**: golang-migrate, запуск как job в общем docker-compose (проверяет схему и выполняет недостающие миграции).
- **Frontend**: React, детали реализации см. в `.cursor/rules/dev-frontend-rules.md`.
- **Proxy и TLS**: Caddy (автоматическая выдача сертификатов, обратный прокси).
- **Аутентификация**: JWT (JSON Web Token) со сроком жизни 24 часа для взаимодействия между фронтендом и бэкендом.
- **Развертывание**: docker-compose, детали см. в `.cursor/rules/deploy-rules.md`.

---

## 1. Обязательные разделы
- Обзор и цели;
- Диаграмма компонентов (Mermaid);
- Основные потоки (sequence diagrams в Mermaid);
- API‑контур `docs/openapi.yaml` (будет создан позже), без включения;
- Модель данных `db/schema.dbml` (будет создана позже), без включения;
- Безопасность;
- Наблюдаемость.

---

## 2. Требования к архитектуре
- Архитектура должна включать **диаграмму компонентов** в формате Mermaid.  
- Для каждого ключевого процесса описываются **потоки данных**:  
  - тип потока (HTTP-запрос, WebSocket, миграция и т. п.);  
  - набор атрибутов (поля, идентификаторы, метки времени, коды статуса);  
  - направление (кто инициатор, кто потребитель).  
- Детализация должна позволять:
  - построить **логическую модель данных**;  
  - описать **OpenAPI** для взаимодействия фронтенда и бэкенда.  
- Логическая модель и OpenAPI **не включаются** в архитектурный документ, а создаются отдельно.  

---

## 3. Принципы
- Ясность важнее полноты: пояснять принятые компромиссы и альтернативы.  
- Все ключевые архитектурные решения фиксировать в виде ADR-блоков.  

---

## 4. Требования к коду и диаграммам в документах
- Примеры JSON, схемы и диаграммы — минимально достаточные для реализации.  
- Все диаграммы должны быть представлены в формате **Mermaid** для возможности генерации.  
- ВАЖНО! В текстовых описаниях узлов на диаграммах Mermaid **нельзя использовать символы прямоых и косых слэшей** (`\`,`/`) и **скобки** (`(`, `)`), так как это ломает рендеринг.  
- Перенос строки внутри описания делается **обычным переносом строки прямо в схеме**, а не через `\\n`.  
- Все схемы flowchart должны быть расположены **сверху вниз** (использовать `flowchart TD`).
