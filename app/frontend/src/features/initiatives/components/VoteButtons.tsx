// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
// TK-009/FE: –ö–Ω–æ–ø–∫–∏ up/down –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–ª–æ—Å–∞

import { useState } from 'react';
import { voteForInitiative } from '../api';
import type { Initiative, VoteRequest } from '../types';

interface VoteButtonsProps {
  initiative: Initiative;
  onVoteChange: (updatedInitiative: Initiative) => void;
  disabled?: boolean;
}

export function VoteButtons({ initiative, onVoteChange, disabled = false }: VoteButtonsProps) {
  const [isVoting, setIsVoting] = useState(false);

  const handleVote = async (value: VoteRequest['value']) => {
    if (isVoting || disabled) return;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É, —Å–Ω–∏–º–∞–µ–º –≥–æ–ª–æ—Å
    const voteValue = initiative.currentUserVote === value ? 0 : value;

    setIsVoting(true);
    try {
      const updatedInitiative = await voteForInitiative(initiative.id, { value: voteValue });
      onVoteChange(updatedInitiative);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:', error);
      // TODO: –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    } finally {
      setIsVoting(false);
    }
  };

  const buttonStyle = {
    background: 'transparent',
    border: '1px solid var(--color-border)',
    borderRadius: 'var(--radius)',
    padding: 'var(--space-2) var(--space-3)',
    cursor: isVoting || disabled ? 'not-allowed' : 'pointer',
    display: 'flex',
    alignItems: 'center',
    gap: 'var(--space-2)',
    fontSize: 'var(--fs-sm)',
    fontWeight: 500,
    transition: 'all 0.2s ease',
    opacity: isVoting || disabled ? 0.6 : 1,
  };

  const getUpVoteStyle = () => ({
    ...buttonStyle,
    color: initiative.currentUserVote === 1 ? 'var(--color-success)' : 'var(--color-text-muted)',
    borderColor: initiative.currentUserVote === 1 ? 'var(--color-success)' : 'var(--color-border)',
    background: initiative.currentUserVote === 1 ? 'rgba(16, 185, 129, 0.1)' : 'transparent',
  });

  const getDownVoteStyle = () => ({
    ...buttonStyle,
    color: initiative.currentUserVote === -1 ? 'var(--color-danger)' : 'var(--color-text-muted)',
    borderColor: initiative.currentUserVote === -1 ? 'var(--color-danger)' : 'var(--color-border)',
    background: initiative.currentUserVote === -1 ? 'rgba(239, 68, 68, 0.1)' : 'transparent',
  });

  return (
    <div 
      data-vote-buttons 
      style={{
        display: 'flex',
        gap: 'var(--space-2)',
        alignItems: 'center',
      }}
    >
      {/* –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–∞ "–∑–∞" */}
      <button
        onClick={() => handleVote(1)}
        disabled={isVoting || disabled}
        style={getUpVoteStyle()}
        title={initiative.currentUserVote === 1 ? '–°–Ω—è—Ç—å –≥–æ–ª–æ—Å' : '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å "–∑–∞"'}
      >
        <span style={{ fontSize: '16px' }}>üëç</span>
        <span>{initiative.upVotes}</span>
      </button>

      {/* –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–∞ "–ø—Ä–æ—Ç–∏–≤" */}
      <button
        onClick={() => handleVote(-1)}
        disabled={isVoting || disabled}
        style={getDownVoteStyle()}
        title={initiative.currentUserVote === -1 ? '–°–Ω—è—Ç—å –≥–æ–ª–æ—Å' : '–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å "–ø—Ä–æ—Ç–∏–≤"'}
      >
        <span style={{ fontSize: '16px' }}>üëé</span>
        <span>{initiative.downVotes}</span>
      </button>

      {/* –°—á–µ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
      <div style={{
        padding: 'var(--space-2) var(--space-3)',
        borderRadius: 'var(--radius)',
        background: 'var(--color-bg-soft)',
        color: 'var(--color-text)',
        fontSize: 'var(--fs-sm)',
        fontWeight: 600,
        minWidth: '40px',
        textAlign: 'center',
      }}>
        {initiative.voteScore > 0 && '+'}
        {initiative.voteScore}
      </div>
    </div>
  );
}
