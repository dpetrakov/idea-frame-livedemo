version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  backend:
    build:
      context: ..
      dockerfile: app/backend/Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      BACKEND_PORT: ${BACKEND_PORT}
      ENV: ${ENV:-dev}
    expose:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

  frontend:
    build:
      context: ..
      dockerfile: app/frontend/Dockerfile
    environment:
      REACT_APP_API_URL: https://${APP_URL}/api
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - app_network

  caddy:
    image: caddy:2.7-alpine
    environment:
      APP_URL: ${APP_URL}
      CADDY_EMAIL: ${CADDY_EMAIL}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network

volumes:
  postgres_data:
  caddy_data:
  caddy_config:

networks:
  app_network:
    driver: bridge
